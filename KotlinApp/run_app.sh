#!/bin/bash

echo "üöÄ Iniciando proceso completo de compilaci√≥n, instalaci√≥n y ejecuci√≥n de KotlinApp..."
echo "=================================================="

# Configurar variables de entorno
export PATH=$PATH:/Users/marcosespana/Library/Android/sdk/platform-tools
export PATH=$PATH:/Users/marcosespana/Library/Android/sdk/emulator

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar logs en tiempo real
show_logs() {
    echo -e "${BLUE}üì± Mostrando logs de la aplicaci√≥n...${NC}"
    echo "=================================================="
    adb logcat | grep -E "(kotlinapp|FATAL|AndroidRuntime|App|PreferencesManager)" &
    local log_pid=$!
    sleep 10
    kill $log_pid 2>/dev/null
    echo "=================================================="
}

# Funci√≥n para monitorear logs de login en tiempo real
monitor_login_logs() {
    echo -e "${YELLOW}üîç Monitoreando logs de login en tiempo real...${NC}"
    echo "=================================================="
    echo -e "${BLUE}üí° Presiona Ctrl+C para detener el monitoreo${NC}"
    echo "=================================================="
    
    # Limpiar logs anteriores
    adb logcat -c
    
    # Monitorear logs espec√≠ficos de login
    adb logcat | grep -E "(kotlinapp|LoginViewModel|AuthRepository|AuthApiService|Retrofit|OkHttp|HTTP|Exception|Error|FATAL|AndroidRuntime)" --line-buffered
}

# Funci√≥n para verificar errores
check_errors() {
    echo -e "${YELLOW}üîç Verificando errores en logs...${NC}"
    local errors=$(adb logcat -d | grep -E "(FATAL|AndroidRuntime|Exception.*kotlinapp)" | tail -5)
    if [ -n "$errors" ]; then
        echo -e "${RED}‚ùå Errores encontrados:${NC}"
        echo "$errors"
        return 1
    else
        echo -e "${GREEN}‚úÖ No se encontraron errores recientes${NC}"
        return 0
    fi
}

# Funci√≥n para ver errores espec√≠ficos de login
check_login_errors() {
    echo -e "${YELLOW}üîç Verificando errores espec√≠ficos de login...${NC}"
    echo "=================================================="
    
    # Buscar errores de red/HTTP
    echo -e "${BLUE}üì° Errores de red/HTTP:${NC}"
    local network_errors=$(adb logcat -d | grep -E "(Retrofit|OkHttp|HTTP|Connection|Network|Timeout)" | tail -10)
    if [ -n "$network_errors" ]; then
        echo "$network_errors"
    else
        echo "No se encontraron errores de red"
    fi
    echo ""
    
    # Buscar errores de autenticaci√≥n
    echo -e "${BLUE}üîê Errores de autenticaci√≥n:${NC}"
    local auth_errors=$(adb logcat -d | grep -E "(AuthRepository|AuthApiService|LoginViewModel|401|403|Unauthorized)" | tail -10)
    if [ -n "$auth_errors" ]; then
        echo "$auth_errors"
    else
        echo "No se encontraron errores de autenticaci√≥n"
    fi
    echo ""
    
    # Buscar errores generales de la app
    echo -e "${BLUE}üö® Errores generales de la aplicaci√≥n:${NC}"
    local app_errors=$(adb logcat -d | grep -E "(kotlinapp|Exception|Error|FATAL)" | tail -10)
    if [ -n "$app_errors" ]; then
        echo "$app_errors"
    else
        echo "No se encontraron errores generales"
    fi
    echo "=================================================="
}

# Funci√≥n para verificar estado de la aplicaci√≥n
check_app_status() {
    echo -e "${YELLOW}üìä Verificando estado de la aplicaci√≥n...${NC}"
    local app_process=$(adb shell ps | grep kotlinapp)
    if [ -n "$app_process" ]; then
        echo -e "${GREEN}‚úÖ Aplicaci√≥n ejecut√°ndose correctamente${NC}"
        echo "Proceso: $app_process"
        return 0
    else
        echo -e "${RED}‚ùå Aplicaci√≥n no est√° ejecut√°ndose${NC}"
        return 1
    fi
}

# Funci√≥n para verificar si hay dispositivos conectados
check_devices() {
    local devices=$(adb devices | grep -v "List of devices attached" | grep -c "device$")
    echo $devices
}

# Funci√≥n para abrir el emulador
start_emulator() {
    echo "No hay dispositivos conectados. Iniciando emulador..."
    echo "Esto puede tomar unos minutos..."
    
    # Terminar cualquier emulador existente en modo headless
    pkill -f "qemu-system-aarch64" 2>/dev/null
    
    # Iniciar el emulador en segundo plano
    emulator -avd PixelLiteApi34 &
    local emulator_pid=$!
    
    echo "Esperando a que el emulador se inicie..."
    
    # Esperar hasta que el emulador est√© conectado (m√°ximo 2 minutos)
    local timeout=120
    local count=0
    
    while [ $count -lt $timeout ]; do
        if [ $(check_devices) -gt 0 ]; then
            echo "Emulador conectado exitosamente"
            return 0
        fi
        sleep 2
        count=$((count + 2))
        echo "Esperando... ($count/$timeout segundos)"
    done
    
    echo "Timeout: El emulador no se conect√≥ en 2 minutos"
    kill $emulator_pid 2>/dev/null
    return 1
}

# Verificar dispositivos conectados
echo "Verificando dispositivos conectados..."
device_count=$(check_devices)

if [ $device_count -eq 0 ]; then
    echo "No hay dispositivos conectados"
    start_emulator
    if [ $? -ne 0 ]; then
        echo "No se pudo iniciar el emulador. Abortando..."
        exit 1
    fi
else
    echo "Dispositivo(s) encontrado(s): $device_count"
fi

# Mostrar dispositivos conectados
echo -e "${BLUE}üì± Dispositivos conectados:${NC}"
adb devices
echo ""

# Paso 1: Limpiar compilaci√≥n anterior
echo -e "${YELLOW}üßπ Paso 1: Limpiando compilaci√≥n anterior...${NC}"
./gradlew clean
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
else
    echo -e "${RED}‚ùå Error en la limpieza${NC}"
fi
echo ""

# Paso 2: Compilar la aplicaci√≥n
echo -e "${YELLOW}üî® Paso 2: Compilando la aplicaci√≥n...${NC}"
./gradlew assembleDebug
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Compilaci√≥n exitosa${NC}"
else
    echo -e "${RED}‚ùå Error en la compilaci√≥n${NC}"
    exit 1
fi
echo ""

# Paso 3: Instalar en el dispositivo
echo -e "${YELLOW}üì¶ Paso 3: Instalando en el dispositivo...${NC}"
./gradlew installDebug
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Instalaci√≥n exitosa${NC}"
else
    echo -e "${RED}‚ùå Error en la instalaci√≥n${NC}"
    exit 1
fi
echo ""

# Paso 4: Ejecutar la aplicaci√≥n
echo -e "${YELLOW}üöÄ Paso 4: Ejecutando la aplicaci√≥n...${NC}"
adb shell am start -n com.example.kotlinapp/.MainActivity
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aplicaci√≥n ejecutada correctamente${NC}"
else
    echo -e "${RED}‚ùå Error al ejecutar la aplicaci√≥n${NC}"
    exit 1
fi
echo ""

# Paso 5: Esperar un momento para que la app se inicie
echo -e "${YELLOW}‚è≥ Paso 5: Esperando que la aplicaci√≥n se inicie...${NC}"
sleep 5

# Paso 6: Verificar estado de la aplicaci√≥n
echo -e "${YELLOW}üìä Paso 6: Verificando estado de la aplicaci√≥n...${NC}"
check_app_status
echo ""

# Paso 7: Verificar errores
echo -e "${YELLOW}üîç Paso 7: Verificando errores...${NC}"
check_errors
echo ""

# Paso 8: Mostrar logs
echo -e "${YELLOW}üì± Paso 8: Mostrando logs de la aplicaci√≥n...${NC}"
show_logs

# Resumen final
echo -e "${GREEN}üéâ ¬°PROCESO COMPLETADO!${NC}"
echo "=================================================="
echo -e "${BLUE}üìã Resumen:${NC}"
echo "‚úÖ Compilaci√≥n: Exitosa"
echo "‚úÖ Instalaci√≥n: Exitosa"
echo "‚úÖ Ejecuci√≥n: Exitosa"
echo "‚úÖ Verificaci√≥n: Completada"
echo ""
echo -e "${YELLOW}üí° La aplicaci√≥n est√° ejecut√°ndose en tu emulador${NC}"
echo "=================================================="

# Men√∫ de opciones adicionales
echo -e "${BLUE}üîß Opciones adicionales:${NC}"
echo "1. Ver errores espec√≠ficos de login"
echo "2. Monitorear logs en tiempo real"
echo "3. Verificar estado de la aplicaci√≥n"
echo "4. Salir"
echo ""
read -p "Selecciona una opci√≥n (1-4): " option

case $option in
    1)
        check_login_errors
        ;;
    2)
        monitor_login_logs
        ;;
    3)
        check_app_status
        ;;
    4)
        echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"
        ;;
    *)
        echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"
        ;;
esac
